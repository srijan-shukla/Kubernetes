fullnameOverride: flask-calculator-app
namespace: exercise 

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 90
replicaCount: 1

strategyType:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate

podAnnotations:
  cluster-autoscaler.kubernetes.io/safe-to-evict: "true"

labels:
  env: "exercise"
  application: "flask-calculator-app"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
    # eks.amazonaws.com/role-arn: 
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podSecurityContext: 
   fsGroup: 2001

securityContext: 

image:
  repository: 590184126329.dkr.ecr.ap-south-1.amazonaws.com/flask-calculator-app/exercise
  pullPolicy: IfNotPresent
  tag: '0b1ee1a'

env: []  
  
envFrom:
  POD_IP: "status.podIP"
  POD_SERVICE_ACCOUNT: "spec.serviceAccountName"

container:
  port: 6005

probes:
  enabled: true
  livenessProbe:
    path: /fca/health
    port: 6005
    initialDelaySeconds: 50
    periodSeconds: 10

  readinessProbe:
    path: /fca/health
    port: 6005
    initialDelaySeconds: 50
    periodSeconds: 10

resources:
  limits:
    cpu: 512m
    memory: 750Mi
  requests:
    cpu: 256m
    memory: 256Mi

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: application
          operator: In
          values:
          - flask-calculator-app
      topologyKey: "kubernetes.io/hostname"

service:
  enabled: true
  type: LoadBalancer
  name: fca
  port: 80
  targetPort: 6005

podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Ingress section starts from here

bucketName: ""
environment: ""
springProfileActive: ""

# Ingress section starts here

ingress:
  enabled: false

ingressExt:
  enabled: true
  annotations:
    # alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:ap-south-1:182401677120:certificate/34e13411-f8f1-4df4-a672-64c9d79f90c5"
    alb.ingress.kubernetes.io/group.name: prod-fca
    alb.ingress.kubernetes.io/healthcheck-path: /fca/health
    alb.ingress.kubernetes.io/healthcheck-port: "6005"
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "3"
    alb.ingress.kubernetes.io/healthy-threshold-count: "3"
    alb.ingress.kubernetes.io/security-groups: sg-01360f7ae2e0f03a6
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '5'
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "3"
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/tags: component=fca,environment=prod
  path: 
    /fca:
            pathType: Prefix
            backend:
              service:
                name: flask-calculator-app
            port:
              number: 80
    # kubernetes.io/tls-acme: "true"
  # hosts:
  #   - host: *
  #     paths:
  #     - path: /*
  #       pathType: ImplementationSpecific
  tls: []

# Ingress section ends here
